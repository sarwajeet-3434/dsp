% Parameters for the signal
fs_original = 1000;       % Original sampling frequency (Hz)
duration = 1;             % Duration of the signal (seconds)
t_original = 0:1/fs_original:duration-1/fs_original;  % Time vector for original signal
f_signal = 50;            % Frequency of the signal (Hz)
x_original = sin(2*pi*f_signal*t_original); % Original signal (sine wave)

% Decimation (Down-sampling)
M = 4; % Decimation factor (down-sample by a factor of 4)
x_decimated = x_original(1:M:end); % Manually downsample the signal by taking every M-th sample
fs_decimated = fs_original / M; % New sampling frequency after decimation
t_decimated = t_original(1:M:end); % Time vector for decimated signal

% Interpolation (Up-sampling)
L = 2; % Interpolation factor (up-sample by a factor of 2)
x_interpolated = zeros(1, L*length(x_original)); % Pre-allocate the upsampled signal array
x_interpolated(1:L:end) = x_original; % Insert zeros between each sample
% Apply low-pass filtering to remove high-frequency components
x_interpolated = filter(1, [1, -0.95], x_interpolated); % Simple low-pass filter to prevent aliasing
fs_interpolated = fs_original * L; % New sampling frequency after interpolation
t_interpolated = 0:1/fs_interpolated:duration-1/fs_interpolated; % Time vector for interpolated signal

% Plot the original, decimated, and interpolated signals
figure;

% Original Signal
subplot(3, 1, 1);
plot(t_original, x_original, 'b', 'LineWidth', 1.5);
title('Original Signal (50 Hz)');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

% Decimated Signal
subplot(3, 1, 2);
stem(t_decimated, x_decimated, 'r', 'LineWidth', 1.5);
title('Decimated Signal (Down-sampled by 4)');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

% Interpolated Signal
subplot(3, 1, 3);
plot(t_interpolated, x_interpolated, 'g', 'LineWidth', 1.5);
title('Interpolated Signal (Up-sampled by 2)');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

% Play the original and processed signals
disp('Playing Original Signal...');
sound(x_original, fs_original);
pause(duration + 1); % Wait for the sound to finish

disp('Playing Decimated Signal...');
sound(x_decimated, fs_decimated);
pause(duration + 1);

disp('Playing Interpolated Signal...');
sound(x_interpolated, fs_interpolated);
